* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}
body {
    width: 100%;
    min-height: 100vh;
    background: #efefef;
    display: flex;
    justify-content: center;
    align-items: center;
    text-align: center;
}
.item {
    width: 200px;
    height: 200px;
    border: 1px solid #777;
    margin-top: 30px;
    background-color: orange;
    transition: transform 0.5s ease-in-out;
}
.item:hover {
    transform: scale(1.2);
}
.item2 {
    width: 300px;
    height: 300px;
    background: red;
    margin-top: 30px;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 24px;
    color: #efefef;
    transition: transform 0.5s ease-in-out;
}
.item2:hover {
    transform: rotate(225deg);
}
/* CSS Animations: */
/* CSS animations allow you to create smooth and dynamic effects on web pages. You can animate various CSS properties, such as position, size, color, and opacity, to bring elements to life. Animations are created using @keyframes rule, which defines the intermediate steps (keyframes) of the animation. Here's an example: */

/* @keyframes slide-in {
    0% { transform: translateX(-100%); }
    100% { transform: translateX(0); }
  }
  
  .slide {
    animation-name: slide-in;
    animation-duration: 2s;
    animation-delay: 1s;
    animation-fill-mode: forwards;
  } */

/* In this example, we define a keyframe animation called slide-in that moves an element from left to right. The animation starts with the element translated 100% to the left (0% keyframe) and ends with the element at its original position (100% keyframe). The .slide class is then assigned the animation using the animation-name property. We set the duration to 2 seconds, a delay of 1 second, and animation-fill-mode to forwards to retain the final state of the animation. */

/* CSS Transitions: */
/* CSS transitions allow you to smoothly change CSS properties over a specified duration. Transitions are triggered by an event, such as hovering over an element or changing its class. Here's an example: */
/* .box {
    width: 100px;
    height: 100px;
    background-color: blue;
    transition-property: background-color;
    transition-duration: 0.5s;
  }
  
  .box:hover {
    background-color: red;
  } */

/* In this example, we have a box element with a blue background color. When you hover over the box, the background color smoothly transitions to red. We specify the background-color property in the transition-property to indicate which property should transition. The transition-duration property sets the duration of the transition. */

/* CSS animations and transitions provide powerful ways to add interactivity and visual effects to your web pages. By combining these techniques with other CSS properties and selectors, you can create compelling and engaging user experiences. */
